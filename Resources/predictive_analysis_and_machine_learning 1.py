# -*- coding: utf-8 -*-
"""SINHA_Predictive Analysis and Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SN-HNtgel1WEjGl1M4sYhJWyM2PMKPi4

Predictive Analysis: Mushrooms

Section 2: Python Code: Exploratory Data Analysis & Classification Algorithms on Mushroom Dataset
"""

# importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#load the dataset
mushrooms_df = pd.read_csv('mushrooms.csv')

print(mushrooms_df.info())

# Check for duplicates
duplicates = mushrooms_df.duplicated()

# Count duplicate rows
duplicate_count = duplicates.sum()
print(f"Number of duplicate rows: {duplicate_count}")

#missing values
missing_values = mushrooms_df.isnull().sum()
# Display the cleaned data and missing value summary
mushrooms_df.head(), missing_values

#Summary statistics for categorical features
print("\nSummary statistics for categorical features:")
for column in mushrooms_df.columns:
    if mushrooms_df[column].dtype == 'object':
        print(f"\nFrequency counts for {column}:\n", mushrooms_df[column].value_counts())

"""Visualisation"""

#Visualization of distribution of the target variable ('class')
plt.figure(figsize=(6, 4))
sns.countplot(x='class', data=mushrooms_df, hue='class', palette='Set1')
plt.title("Distribution of Edible vs. Poisonous Mushrooms")
plt.xlabel("Class (Edible or Poisonous)")
plt.ylabel("Count")
plt.show()

# Distribution of categorical features (e.g., 'cap-shape')
plt.figure(figsize=(6, 4))
sns.countplot(x='cap-shape', data=mushrooms_df, hue='class', palette='Set1')
plt.title("Distribution of Cap-Shape by Class")
plt.xlabel("Cap-Shape")
plt.ylabel("Count")
plt.legend(title='Class', labels=['Edible', 'Poisonous'])
plt.show()

# Visualizing the distribution of cap color
plt.figure(figsize=(8, 4))
sns.countplot(x="cap-color", data=mushrooms_df, palette="Set2")
plt.title("Distribution of Cap Colors")
plt.xlabel("Cap Color")
plt.ylabel("Count")
plt.show()

from sklearn.preprocessing import LabelEncoder

# Encode categorical features
le = LabelEncoder()
for column in mushrooms_df.columns:
    mushrooms_df[column] = le.fit_transform(mushrooms_df[column])

# Display the first few rows after encoding
print(mushrooms_df.head())

# Plot heatmap to see feature correlations
plt.figure(figsize=(6, 4))
sns.heatmap(mushrooms_df.corr(), annot=False, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

"""Importing Necessary Libraries"""

import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier

"""Using Machine Leraning Algorithms"""

# Split the dataset into features (x) and target (y)
x = mushrooms_df.drop('class', axis=1)
y = mushrooms_df['class']
# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

# Initialize models
models = {
    "Gaussian Naive Bayes": GaussianNB(),
    "Random Forest": RandomForestClassifier(random_state=42),
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "SVC": SVC(random_state=42),
    "KNN": KNeighborsClassifier(),
    "XGBoost": XGBClassifier(random_state=42)
}

# Train and evaluate each model
for name, model in models.items():
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)

    # Calculate and print metrics
    print(f"{name}:")
    print(f"  Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    print(f"  Precision: {precision_score(y_test, y_pred):.4f}")
    print(f"  Recall: {recall_score(y_test, y_pred):.4f}")
    print(f"  F1-Score: {f1_score(y_test, y_pred):.4f}")
    print()